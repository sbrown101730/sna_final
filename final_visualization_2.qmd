---
title: "2nd visualization"
author: "siya brown"
date: today 
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| output: false
#| message: false

rm(list=ls())

# Lab 3:
# Exponential Random Graph Models (ERGMs)

# Clear your environment
rm(list=ls())

# Install packages below if you do not have them:
# -------------------------------------------------
if (!"statnet" %in% installed.packages()) install.packages("statnet") # For fitting ERGMs
if (!"igraph" %in% installed.packages()) install.packages("igraph") # For network plotting
if (!"texreg" %in% installed.packages()) install.packages("texreg") # For printing "nicer" model output

library(statnet)
library(readr)

# -------------------------------------------------------------------------------------------------
# Set the working directory
# Session > Set Working Directory > To Source File Location
# -------------------------------------------------------------------------------------------------
list.files() # List the files in the current working directory to see if you're in the right directory

```

```{r}
#| echo: true
#| output: false
#| message: false
#| label: load data

library(dplyr) 

set.seed(5)

# read tsv
hyperlink_large <- read_tsv("data/soc-redditHyperlinks-body.tsv") %>%
  janitor::clean_names() %>%
  select(source_subreddit, target_subreddit)

# read csv
popularity_large <- read_csv("data/subreddits_public.csv") |> 
  janitor::clean_names() |> 
  select(subreddit_name, subscribers_count)
```



```{r}
#| echo: false
#| output: false
#| message: false
#| label: load data

library(dplyr) 
library(tidyverse)

set.seed(3)

# read csv
popularity_large <- read_csv("data/subreddits_public.csv")

popularity_clean <- popularity_large %>%
  mutate(subreddit_name = str_to_lower(subreddit_name))

askreddit_1 <- hyperlink_large %>%
  janitor::clean_names() %>%
  filter(source_subreddit == "askreddit" | target_subreddit == "askreddit")
  
askreddit_2 <- hyperlink_large %>%
  janitor::clean_names() %>%
  filter(source_subreddit %in% askreddit_1$source_subreddit | 
           target_subreddit %in% askreddit_1$target_subreddit |
           source_subreddit %in% askreddit_1$target_subreddit |
           target_subreddit %in% askreddit_1$source_subreddit)
  
askreddit_3 <- askreddit_2 %>%
  count(source_subreddit, target_subreddit) %>%
  filter(n > 35)

popularity <- popularity_clean %>%
  filter(subreddit_name %in% askreddit_3$source_subreddit | 
           subreddit_name %in% askreddit_3$target_subreddit) %>%
  select(subreddit_name, subscribers_count) %>%
  mutate(
    subscribers_count = as.numeric(subscribers_count),
    size = case_when(
      subscribers_count <= 10000 ~ "small",
      subscribers_count <= 50000 ~ "medium",
      subscribers_count > 50000 ~ "large"
    ),
    size = size %>% 
      replace_na("missing")
  ) %>% 
  arrange(subreddit_name)

summary(popularity)
# 
# subreddits <- unique(c(hyperlink$source_subreddit, hyperlink$target_subreddit))
# 
# popularity[!(popularity$subreddit_name %in% subreddits)]

```


# 1. askreddit
```{r}
#| echo: false
#| output: false
#| message: false

# View the first rows of the edgelist to make sure it imported correctly:
head(askreddit_3)
# Convert the edgelist to a network object in statnet format:
askreddit_net <- as.network.matrix(askreddit_3, matrix.type = "edgelist") 

plot(askreddit_net)
# # 
# # askreddit_net |> 
# #   network::set.edge.attribute("sentiment", value = askreddit$sentiment)
# 
# askreddit_net |>
#   network::set.vertex.attribute("num_subs", value = popularity$subscribers_count)
# 
askreddit_net |>
  network::set.vertex.attribute("size", value = popularity$size)

askreddit_net
# 
# # View a summary of the network object
# askreddit_net
# 
# # Check vertex attribute
network::get.vertex.attribute(askreddit_net,"vertex.names")
# 
# # Check edge attribute
network::get.vertex.attribute(askreddit_net,"size")

```


```{r}
# ----------------------------------------------------------------------------
# Visualize networks
# ----------------------------------------------------------------------------
library('igraph') # Ignore messages on any objects that are masked

# Set default plot options
igraph_options(vertex.size = 2, vertex.color = 'grey', # vertex.size changes the size of nodes; vertex.color changes the color of nodes
               edge.color='gray80', edge.arrow.size=.1, # edge.color changes the color of ties; edge.arrow.size changes the size of tie arrow heads
               vertex.label = NA)                       # vertex.label = NA specifies not to display vertex labels in the plot

# Plot the Advice network
askreddit_igraph <- graph.adjacency(as.matrix.network(askreddit_net)) # make an igraph network object from statnet network object

askreddit_igraph <- set_vertex_attr(askreddit_igraph, "popularity", value = network::get.vertex.attribute(askreddit_net,"size"))

count_components(askreddit_igraph)
# Calculates and stores a spring-embedded layout
                                           # We will re-use this same layout for each plot, so nodes are always in the same place


```


```{r}
#| echo: false
#| output: false
#| message: false

# # View the first rows of the edgelist to make sure it imported correctly:
# head(hyperlink)
# # Convert the edgelist to a network object in statnet format:
# askreddit_net <- as.network.matrix(hyperlink, matrix.type = "edgelist") 
# 
# askreddit_net |>
#   network::set.vertex.attribute("num_subs", value = popularity$subscribers_count)
# 
# askreddit_net |>
#   network::set.vertex.attribute("size", value = popularity$size)
# 
# # View a summary of the network object
# askreddit_net
# 
# # Check vertex attribute
# network::get.vertex.attribute(askreddit_net,"size")

```

## 1. Plot the base (Advice) network and include it in your report. **(5 pts)**

- Noticeable centrality for one node

```{r}
#| label: giant component

reddit_comp <- igraph::components(askreddit_igraph)
giantGraph_askreddit <- askreddit_igraph %>%
  induced_subgraph(., which(reddit_comp$membership == which.max(reddit_comp$csize)))

plot(giantGraph_askreddit)

library(intergraph)

askreddit_giant <- asNetwork(giantGraph_askreddit)

askreddit_giant
# vcount(gpt_graph) ## the number of nodes/actors/users
# ecount(gpt_graph) ## the number of edges


SNA CENTRALITIES - FEED IT THE DATA 
```
